<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-04-27T23:50:01-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Binh Vu</title><entry><title type="html">From Sketches to HTML/CSS code</title><link href="http://localhost:4000/projects/csci-599/2019/04/27/from-sketches-to-html-css-code.html" rel="alternate" type="text/html" title="From Sketches to HTML/CSS code" /><published>2019-04-27T13:08:19-07:00</published><updated>2019-04-27T13:08:19-07:00</updated><id>http://localhost:4000/projects/csci-599/2019/04/27/from-sketches-to-html-css-code</id><content type="html" xml:base="http://localhost:4000/projects/csci-599/2019/04/27/from-sketches-to-html-css-code.html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Creating websites is a difficult task that requires expertise and a significant amount of time. In a typical web development workflow, web developers implement HTML/CSS and Javascript code based on a mock-up UI, which are created using applications such as Sketch. A task of synthesising HTML/CSS programs from mock-up UIs helps speed up the development process by allowing developers to focus on implementing Javascript logic.&lt;/p&gt;

&lt;p&gt;In this post, we present a system that directly generates HTML/CSS programs from screenshot images of mock-up UIs. In particular, given a HTML/CSS libraries containing a set of HTML tags &lt;script type=&quot;math/tex&quot;&gt;\mathcal{T}&lt;/script&gt; and CSS classes &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt;, the system converts a screenshot &lt;script type=&quot;math/tex&quot;&gt;I&lt;/script&gt; of a target mock-up UI into HTML/CSS program &lt;script type=&quot;math/tex&quot;&gt;P&lt;/script&gt; that renders &lt;script type=&quot;math/tex&quot;&gt;I&lt;/script&gt;.
We have consider two approaches: supervised approach and reinforcement learning approach. However, due to time constraint.&lt;/p&gt;

&lt;h1 id=&quot;generating-htmlcss-code-with-neural-guided-search&quot;&gt;Generating HTML/CSS Code with Neural-Guided Search&lt;/h1&gt;

&lt;p&gt;The HTML programs are formulate as a set of tokens, each token are either a HTML tag (e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;h5&amp;gt;&lt;/code&gt;) or a combination of HTML tag and CSS classes (e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;&lt;/code&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;#text&lt;/code&gt;. Let &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is a function that predict probabilities of next tokens of the program given the current program and the target image. Then, the desired program &lt;script type=&quot;math/tex&quot;&gt;P&lt;/script&gt; can be generated by repeated applying &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; to generate one token by one token, and invoke the rendering program to evaluate the current program until we find the &lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt; token that indicates the end of the program.&lt;/p&gt;

&lt;p&gt;To estimate &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;, we use a encoder-decoder paradigm that encodes a target image to a representation vector &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;, then feed &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt; with other tokens of the programs to an LSTM to decode the next token.&lt;/p&gt;

&lt;h1 id=&quot;related-work&quot;&gt;Related Work&lt;/h1&gt;

&lt;p&gt;Pix2code&lt;/p&gt;

&lt;h1 id=&quot;empirical-evaluating&quot;&gt;Empirical Evaluating&lt;/h1&gt;

&lt;p&gt;We are evaluting&lt;/p&gt;

&lt;h1 id=&quot;discussion-and-future-work&quot;&gt;Discussion and Future work&lt;/h1&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;h1 id=&quot;appendix&quot;&gt;Appendix&lt;/h1&gt;

&lt;h4 id=&quot;reinforcement-learning-approach&quot;&gt;Reinforcement Learning Approach&lt;/h4&gt;

&lt;style&gt;
	.post-content {
		text-align: justify;
	}
&lt;/style&gt;

&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">Introduction</summary></entry></feed>